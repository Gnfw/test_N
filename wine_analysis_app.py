# -*- coding: utf-8 -*-
# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import os
import textwrap
from matplotlib import gridspec
from io import BytesIO
import hashlib
import logging
import plotly.express as px
from wordcloud import WordCloud
from textblob import TextBlob
import folium
from streamlit_folium import st_folium
from datetime import datetime
import tempfile
from fpdf import FPDF
import base64
import re
import warnings
from PIL import Image

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
warnings.filterwarnings("ignore", category=UserWarning, module="fpdf")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=pd.errors.SettingWithCopyWarning)

# ============================================
# –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================================

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="üç∑ –õ—É—á—à–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞",
    page_icon="üç∑",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ============================================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ò –°–õ–û–í–ê–†–ò
# ============================================

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
COLUMN_TRANSLATION = {
    'country': '–°—Ç—Ä–∞–Ω–∞',
    'points': '–†–µ–π—Ç–∏–Ω–≥',
    'price': '–¶–µ–Ω–∞',
    'variety': '–°–æ—Ä—Ç',
    'winery': '–í–∏–Ω–æ–¥–µ–ª—å–Ω—è',
    'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
    'province': '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è',
    'region_1': '–†–µ–≥–∏–æ–Ω'
}

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
STAT_TRANSLATION = {
    'mean': '–°—Ä–µ–¥–Ω–µ–µ',
    'median': '–ú–µ–¥–∏–∞–Ω–∞',
    'std': '–°—Ç–∞–Ω–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ',
    'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
}

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω
COUNTRY_TRANSLATION = {
    'Australia': '–ê–≤—Å—Ç—Ä–∞–ª–∏—è',
    'New Zealand': '–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è',
    'US': '–°–®–ê',
    'France': '–§—Ä–∞–Ω—Ü–∏—è',
    'Italy': '–ò—Ç–∞–ª–∏—è',
    'Spain': '–ò—Å–ø–∞–Ω–∏—è',
    'Portugal': '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è',
    'Chile': '–ß–∏–ª–∏',
    'Argentina': '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞',
    '–ê–≤—Å—Ç—Ä–∞–ª–∏—è': '–ê–≤—Å—Ç—Ä–∞–ª–∏—è',
    '–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è': '–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è'
}

# –ü—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —à—Ä–∏—Ñ—Ç–∞)
FONT_PATH = "arial.ttf"

# ============================================
# –ö–õ–ê–°–° –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò PDF
# ============================================

class WinePDF(FPDF):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF –æ—Ç—á–µ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
    def __init__(self):
        super().__init__()
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            self.add_font('Arial', '', 'arial.ttf', uni=True)
            self.add_font('Arial', 'B', 'arialbd.ttf', uni=True)
            self.add_font('Arial', 'I', 'ariali.ttf', uni=True)
            self.add_font('Arial', 'BI', 'arialbi.ttf', uni=True)
            self.set_font("Arial", size=10)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞ Arial: {e}")
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DejaVu - —á–∞—Å—Ç–æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                self.add_font('DejaVu', '', 'DejaVuSans.ttf', uni=True)
                self.set_font("DejaVu", size=10)
            except:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç (–Ω–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è)
                self.set_font("helvetica", size=10)
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã. PDF –±—É–¥–µ—Ç –±–µ–∑ —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.")
        
    def header(self):
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, '–õ—É—á—à–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ (–¥–ª—è –∫–æ—Ä–æ—á–∫–∏)', 0, 1, 'C')
        self.ln(5)
        
    def footer(self):
        # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.page_no()}', 0, 0, 'C')
        
    def safe_cell(self, w, h=0, txt="", border=0, ln=0, align="L"):
        """–Ø—á–µ–π–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å—Ç—Ä–æ–π–∫–æ–π —à–∏—Ä–∏–Ω—ã"""
        required_width = self.get_string_width(txt) + 2
        effective_width = max(w, required_width)
        self.cell(effective_width, h, txt, border, ln, align)
        
    def add_section_title(self, title, level=1):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∞"""
        if level == 1:
            self.set_font("Arial", 'B', 14)
            self.cell(0, 10, title, ln=1)
            self.ln(2)
        elif level == 2:
            self.set_font("Arial", 'B', 12)
            self.cell(0, 8, title, ln=1)
            self.ln(1)
        else:
            self.set_font("Arial", 'B', 10)
            self.cell(0, 6, title, ln=1)
        self.set_font("Arial", size=10)
        
    def add_plot(self, fig, title=None, width=180):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ PDF"""
        if fig is None:
            return
            
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_img = tempfile.NamedTemporaryFile(suffix='.png', delete=False)
            fig.savefig(temp_img.name, bbox_inches='tight', dpi=100)
            plt.close(fig)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PDF
            if title:
                self.add_section_title(title, level=3)
            self.image(temp_img.name, w=width)
            self.ln(5)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_img.name)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤ PDF: {e}")

# ============================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò
# ============================================

def translate_data(df):
    """–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–π"""
    try:
        # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
        df = df.rename(columns=COLUMN_TRANSLATION)
        
        # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç—Ä–∞–Ω
        if '–°—Ç—Ä–∞–Ω–∞' in df.columns:
            df['–°—Ç—Ä–∞–Ω–∞'] = df['–°—Ç—Ä–∞–Ω–∞'].map(COUNTRY_TRANSLATION).fillna(df['–°—Ç—Ä–∞–Ω–∞'])
            
        return df
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return df

def load_data(uploaded_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if uploaded_file is None or uploaded_file.size == 0:
            raise ValueError("–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")

        file_content = uploaded_file.read()
        
        if uploaded_file.name.endswith('.csv'):
            encodings = ['utf-8', 'windows-1251', 'latin1', 'cp1252']
            for encoding in encodings:
                try:
                    df = pd.read_csv(BytesIO(file_content), encoding=encoding, on_bad_lines='warn')
                    if not df.empty:
                        break
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}: {e}")
            else:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV —Ñ–∞–π–ª")
                
        elif uploaded_file.name.endswith(('.xls', '.xlsx')):
            try:
                df = pd.read_excel(BytesIO(file_content), engine='openpyxl')
            except Exception as e:
                raise ValueError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
        else:
            raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ CSV –∏ Excel —Ñ–∞–π–ª—ã")

        if df.empty:
            raise ValueError("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")

        required_cols = {'country', 'points', 'price', 'variety'}
        available_cols = set(col.lower() for col in df.columns)
        missing_cols = required_cols - available_cols
        
        if missing_cols:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {missing_cols}")

        df = translate_data(df)
        df = df.dropna(subset=['–†–µ–π—Ç–∏–Ω–≥', '–¶–µ–Ω–∞']).drop_duplicates()
        
        if '–û–ø–∏—Å–∞–Ω–∏–µ' in df.columns:
            df['–ì–æ–¥'] = df['–û–ø–∏—Å–∞–Ω–∏–µ'].str.extract(r'(19|20\d{2})')[0]
            df['–ì–æ–¥'] = pd.to_numeric(df['–ì–æ–¥'], errors='coerce')
        
        return df

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

# ============================================
# –§–£–ù–ö–¶–ò–ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò
# ============================================

def create_summary_plot(data, variety):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    try:
        fig = plt.figure(figsize=(18, 14))
        gs = gridspec.GridSpec(3, 2, height_ratios=[1, 1, 0.7])
        
        ax1 = plt.subplot(gs[0, 0])
        sns.boxplot(x='–°—Ç—Ä–∞–Ω–∞', y='–†–µ–π—Ç–∏–Ω–≥', data=data, ax=ax1)
        ax1.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ ({variety})', fontsize=12)
        ax1.tick_params(axis='x', rotation=45)
        
        ax2 = plt.subplot(gs[0, 1])
        sns.boxplot(x='–°—Ç—Ä–∞–Ω–∞', y='–¶–µ–Ω–∞', data=data, ax=ax2)
        ax2.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω ({variety})', fontsize=12)
        ax2.tick_params(axis='x', rotation=45)
        
        ax3 = plt.subplot(gs[1, 0])
        sns.scatterplot(x='–†–µ–π—Ç–∏–Ω–≥', y='–¶–µ–Ω–∞', hue='–°—Ç—Ä–∞–Ω–∞', data=data, ax=ax3, alpha=0.7)
        ax3.set_title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞', fontsize=12)
        
        ax4 = plt.subplot(gs[1, 1])
        if '–ì–æ–¥' in data.columns and not data['–ì–æ–¥'].isna().all():
            year_counts = data.dropna(subset=['–ì–æ–¥']).groupby(['–°—Ç—Ä–∞–Ω–∞', '–ì–æ–¥']).size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            if not year_counts.empty:
                sns.lineplot(x='–ì–æ–¥', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', hue='–°—Ç—Ä–∞–Ω–∞', data=year_counts, ax=ax4)
                ax4.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º', fontsize=12)
            else:
                ax4.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ–¥–∞–º', ha='center', va='center')
                ax4.axis('off')
        else:
            ax4.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–¥–µ', ha='center', va='center')
            ax4.axis('off')
        
        ax5 = plt.subplot(gs[2, :])
        ax5.axis('off')
        
        stats_text = []
        for country in data['–°—Ç—Ä–∞–Ω–∞'].unique():
            country_data = data[data['–°—Ç—Ä–∞–Ω–∞'] == country]
            avg_rating = country_data['–†–µ–π—Ç–∏–Ω–≥'].mean()
            avg_price = country_data['–¶–µ–Ω–∞'].mean()
            stats_text.append(f"{country}: –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ {avg_rating:.1f}, –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ ${avg_price:.1f}")
        
        ax5.text(0.05, 0.95, "\n".join(stats_text), 
                ha='left', va='top', fontsize=11,
                bbox={'facecolor': 'lightgray', 'alpha': 0.2, 'pad': 10})
        
        plt.tight_layout()
        return fig
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π: {str(e)}")
        return None

def create_wordcloud(data, variety):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤"""
    try:
        if '–û–ø–∏—Å–∞–Ω–∏–µ' not in data.columns:
            return None
            
        text = ' '.join(data['–û–ø–∏—Å–∞–Ω–∏–µ'].dropna().astype(str))
        wordcloud = WordCloud(
            width=800, 
            height=400,
            background_color='white',
            stopwords=None,
            min_font_size=10
        ).generate(text)
        
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.imshow(wordcloud, interpolation='bilinear')
        ax.axis("off")
        ax.set_title(f'–ß–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö {variety}', fontsize=12)
        return fig
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤: {e}")
        return None

def analyze_sentiment(data):
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–π"""
    try:
        if '–û–ø–∏—Å–∞–Ω–∏–µ' not in data.columns:
            return None, None
            
        data['sentiment'] = data['–û–ø–∏—Å–∞–Ω–∏–µ'].apply(
            lambda x: TextBlob(str(x)).sentiment.polarity if pd.notna(x) else 0)
        
        fig = plt.figure(figsize=(10, 6))
        sns.boxplot(x='–°—Ç—Ä–∞–Ω–∞', y='sentiment', data=data)
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–π')
        plt.xticks(rotation=45)
        plt.tight_layout()
        return fig, data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return None, None

def create_geographical_analysis(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã"""
    try:
        if '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è' not in data.columns or '–†–µ–≥–∏–æ–Ω' not in data.columns:
            return None, None
            
        region_stats = data.groupby(['–°—Ç—Ä–∞–Ω–∞', '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è', '–†–µ–≥–∏–æ–Ω']).agg({
            '–†–µ–π—Ç–∏–Ω–≥': 'mean',
            '–¶–µ–Ω–∞': 'mean',
            '–°–æ—Ä—Ç': 'count'
        }).reset_index()
        
        fig = plt.figure(figsize=(12, 8))
        sns.scatterplot(
            x='–†–µ–π—Ç–∏–Ω–≥', 
            y='–¶–µ–Ω–∞',
            size='–°–æ—Ä—Ç',
            hue='–°—Ç—Ä–∞–Ω–∞',
            data=region_stats,
            sizes=(20, 200),
            alpha=0.7
        )
        plt.title('–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (—Ä–∞–∑–º–µ—Ä —Ç–æ—á–∫–∏ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤)')
        plt.grid(True)
        plt.tight_layout()
        
        return fig, region_stats
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã: {e}")
        return None, None

# ============================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê
# ============================================

def create_popular_varieties_plot(data):
    """–ì—Ä–∞—Ñ–∏–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"""
    try:
        region_variety = data.groupby(['–°—Ç—Ä–∞–Ω–∞', '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è', '–°–æ—Ä—Ç']).size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        top_by_region = region_variety.sort_values(['–°—Ç—Ä–∞–Ω–∞', '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], ascending=[True, True, False])
        top_by_region = top_by_region.groupby(['–°—Ç—Ä–∞–Ω–∞', '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è']).head(3)
        
        fig = plt.figure(figsize=(12, 8))
        sns.barplot(
            x='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            y='–ü—Ä–æ–≤–∏–Ω—Ü–∏—è',
            hue='–°–æ—Ä—Ç',
            data=top_by_region,
            palette='viridis'
        )
        plt.title('–¢–æ–ø —Å–æ—Ä—Ç–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º')
        plt.tight_layout()
        return fig, top_by_region
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤: {e}")
        return None, None

def create_price_stats_plot(data):
    """–ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"""
    try:
        price_stats = data.groupby(['–°—Ç—Ä–∞–Ω–∞', '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è'])['–¶–µ–Ω–∞'].agg(
            ['mean', 'median', 'min', 'max']
        ).reset_index()
        
        fig = plt.figure(figsize=(12, 8))
        price_stats_melt = price_stats.melt(
            id_vars=['–°—Ç—Ä–∞–Ω–∞', '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è'], 
            value_vars=['mean', 'median', 'min', 'max'],
            var_name='–ú–µ—Ç—Ä–∏–∫–∞',
            value_name='–¶–µ–Ω–∞'
        )
        
        sns.barplot(
            x='–ü—Ä–æ–≤–∏–Ω—Ü–∏—è',
            y='–¶–µ–Ω–∞',
            hue='–ú–µ—Ç—Ä–∏–∫–∞',
            data=price_stats_melt
        )
        plt.title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º')
        plt.xticks(rotation=45)
        plt.tight_layout()
        return fig, price_stats
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω: {e}")
        return None, None

def create_rating_by_region_plot(data):
    """–ì—Ä–∞—Ñ–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"""
    try:
        fig = plt.figure(figsize=(12, 8))
        sns.boxplot(
            x='–ü—Ä–æ–≤–∏–Ω—Ü–∏—è',
            y='–†–µ–π—Ç–∏–Ω–≥',
            hue='–°—Ç—Ä–∞–Ω–∞',
            data=data
        )
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º')
        plt.xticks(rotation=45)
        plt.tight_layout()
        return fig
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º: {e}")
        return None

def create_correlation_plot(data):
    """–ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Ü–µ–Ω—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    try:
        fig = plt.figure(figsize=(10, 8))
        sns.regplot(
            x='–†–µ–π—Ç–∏–Ω–≥',
            y='–¶–µ–Ω–∞',
            data=data,
            scatter_kws={'alpha':0.3}
        )
        plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–º')
        plt.tight_layout()
        
        corr = data[['–†–µ–π—Ç–∏–Ω–≥', '–¶–µ–Ω–∞']].corr().iloc[0,1]
        
        return fig, corr
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {e}")
        return None, None

def create_price_by_region_plot(data):
    """–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"""
    try:
        fig = plt.figure(figsize=(12, 8))
        sns.boxplot(
            x='–ü—Ä–æ–≤–∏–Ω—Ü–∏—è',
            y='–¶–µ–Ω–∞',
            hue='–°—Ç—Ä–∞–Ω–∞',
            data=data
        )
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º')
        plt.xticks(rotation=45)
        plt.tight_layout()
        return fig
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º: {e}")
        return None

# ============================================
# –ì–ï–ù–ï–†–ê–¶–ò–Ø PDF –û–¢–ß–ï–¢–ê
# ============================================

def generate_pdf_report(data, variety):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞"""
    try:
        pdf = WinePDF()
        pdf.add_page()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        pdf.set_font("Arial", size=16, style='B')
        pdf.cell(0, 10, f"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç: {variety}", ln=1, align="C")
        pdf.ln(10)
        
        # 1. –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        pdf.add_section_title("1. –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", level=1)
        
        stats = data.groupby('–°—Ç—Ä–∞–Ω–∞').agg({
            '–†–µ–π—Ç–∏–Ω–≥': ['mean', 'median', 'std', 'count'],
            '–¶–µ–Ω–∞': ['mean', 'median', 'std', 'min', 'max']
        }).reset_index()
        
        stats_text = []
        for _, row in stats.iterrows():
            stats_text.append(
                f"{row['–°—Ç—Ä–∞–Ω–∞']}: "
                f"–†–µ–π—Ç–∏–Ω–≥ {row[('–†–µ–π—Ç–∏–Ω–≥', 'mean')]:.1f}¬±{row[('–†–µ–π—Ç–∏–Ω–≥', 'std')]:.1f}, "
                f"–¶–µ–Ω–∞ ${row[('–¶–µ–Ω–∞', 'mean')]:.1f}¬±${row[('–¶–µ–Ω–∞', 'std')]:.1f}, "
                f"–û–±—Ä–∞–∑—Ü–æ–≤: {int(row[('–†–µ–π—Ç–∏–Ω–≥', 'count')])}"
            )
        
        for line in stats_text:
            pdf.safe_cell(0, 8, line, ln=1)
        pdf.ln(5)
        
        # –¢–æ–ø –≤–∏–Ω
        pdf.add_section_title("–¢–æ–ø-5 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –≤–∏–Ω:", level=2)
        top_wines = data.nlargest(5, '–¶–µ–Ω–∞')[['–í–∏–Ω–æ–¥–µ–ª—å–Ω—è', '–°—Ç—Ä–∞–Ω–∞', '–†–µ–π—Ç–∏–Ω–≥', '–¶–µ–Ω–∞']]
        for _, row in top_wines.iterrows():
            text = f"{row['–í–∏–Ω–æ–¥–µ–ª—å–Ω—è']} ({row['–°—Ç—Ä–∞–Ω–∞']}): {row['–†–µ–π—Ç–∏–Ω–≥']} –±–∞–ª–ª–æ–≤, ${row['–¶–µ–Ω–∞']:.2f}"
            pdf.safe_cell(0, 8, text, ln=1)
        
        pdf.ln(5)
        pdf.add_section_title("–¢–æ–ø-5 —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º:", level=2)
        top_rated = data.nlargest(5, '–†–µ–π—Ç–∏–Ω–≥')[['–í–∏–Ω–æ–¥–µ–ª—å–Ω—è', '–°—Ç—Ä–∞–Ω–∞', '–†–µ–π—Ç–∏–Ω–≥', '–¶–µ–Ω–∞']]
        for _, row in top_rated.iterrows():
            text = f"{row['–í–∏–Ω–æ–¥–µ–ª—å–Ω—è']} ({row['–°—Ç—Ä–∞–Ω–∞']}): {row['–†–µ–π—Ç–∏–Ω–≥']} –±–∞–ª–ª–æ–≤, ${row['–¶–µ–Ω–∞']:.2f}"
            pdf.safe_cell(0, 8, text, ln=1)
        
        # 2. –û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        pdf.add_page()
        pdf.add_section_title("2. –û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞", level=1)
        
        summary_fig = create_summary_plot(data, variety)
        pdf.add_plot(summary_fig, "–°–≤–æ–¥–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
        
        # 3. –¢–µ–∫—Å—Ç–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        pdf.add_page()
        pdf.add_section_title("3. –¢–µ–∫—Å—Ç–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", level=1)
        
        wc_fig = create_wordcloud(data, variety)
        pdf.add_plot(wc_fig, "–û–±–ª–∞–∫–æ —Å–ª–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π –≤–∏–Ω")
        
        sentiment_fig, sentiment_data = analyze_sentiment(data)
        pdf.add_plot(sentiment_fig, "–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–π")
        
        if sentiment_data is not None:
            pdf.add_section_title("–ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π:", level=2)
            
            positive = sentiment_data.nlargest(3, 'sentiment')['–û–ø–∏—Å–∞–Ω–∏–µ']
            pdf.safe_cell(0, 8, "–°–∞–º—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è:", ln=1)
            for i, desc in enumerate(positive, 1):
                pdf.multi_cell(0, 8, f"{i}. {desc[:150]}...", ln=1)
            
            pdf.ln(2)
            
            negative = sentiment_data.nsmallest(3, 'sentiment')['–û–ø–∏—Å–∞–Ω–∏–µ']
            pdf.safe_cell(0, 8, "–°–∞–º—ã–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è:", ln=1)
            for i, desc in enumerate(negative, 1):
                pdf.multi_cell(0, 8, f"{i}. {desc[:150]}...", ln=1)
        
        # 4. –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        pdf.add_page()
        pdf.add_section_title("4. –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", level=1)
        
        geo_fig, geo_stats = create_geographical_analysis(data)
        pdf.add_plot(geo_fig, "–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
        
        if geo_stats is not None:
            pdf.add_section_title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:", level=2)
            geo_stats_display = geo_stats.nlargest(10, '–†–µ–π—Ç–∏–Ω–≥')[['–†–µ–≥–∏–æ–Ω', '–°—Ç—Ä–∞–Ω–∞', '–†–µ–π—Ç–∏–Ω–≥', '–¶–µ–Ω–∞', '–°–æ—Ä—Ç']]
            geo_stats_display.columns = ['–†–µ–≥–∏–æ–Ω', '–°—Ç—Ä–∞–Ω–∞', '–°—Ä. —Ä–µ–π—Ç–∏–Ω–≥', '–°—Ä. —Ü–µ–Ω–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
            
            col_widths = [50, 30, 30, 30, 30]
            headers = geo_stats_display.columns.tolist()
            data_rows = geo_stats_display.values.tolist()
            
            pdf.set_font(style='B')
            for i, header in enumerate(headers):
                pdf.cell(col_widths[i], 10, str(header), border=1)
            pdf.ln()
            
            pdf.set_font(style='')
            for row in data_rows:
                for i, item in enumerate(row):
                    if i == 3:
                        pdf.cell(col_widths[i], 10, f"${float(item):.2f}", border=1)
                    elif i == 2:
                        pdf.cell(col_widths[i], 10, f"{float(item):.1f}", border=1)
                    else:
                        pdf.cell(col_widths[i], 10, str(item), border=1)
                pdf.ln()
        
        # 5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
        pdf.add_page()
        pdf.add_section_title("5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã", level=1)
        
        pop_fig, pop_data = create_popular_varieties_plot(data)
        pdf.add_plot(pop_fig, "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–æ—Ä—Ç–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
        
        price_fig, price_stats = create_price_stats_plot(data)
        pdf.add_plot(price_fig, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
        
        corr_fig, corr = create_correlation_plot(data)
        pdf.add_plot(corr_fig, f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–º (r = {corr:.2f})")
        
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
        pdf.output(temp_file.name)
        return temp_file.name
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        return None

# ============================================
# –ò–ù–¢–ï–†–§–ï–ô–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# ============================================

def show_basic_stats(filtered_data):
    st.header("–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    stats = filtered_data.groupby('–°—Ç—Ä–∞–Ω–∞').agg({
        '–†–µ–π—Ç–∏–Ω–≥': ['mean', 'median', 'std', 'count'],
        '–¶–µ–Ω–∞': ['mean', 'median', 'std', 'min', 'max']
    })
    st.dataframe(stats.style.format({
        ('–†–µ–π—Ç–∏–Ω–≥', 'mean'): '{:.1f}',
        ('–†–µ–π—Ç–∏–Ω–≥', 'median'): '{:.1f}',
        ('–†–µ–π—Ç–∏–Ω–≥', 'std'): '{:.2f}',
        ('–¶–µ–Ω–∞', 'mean'): '${:.2f}',
        ('–¶–µ–Ω–∞', 'median'): '${:.2f}',
        ('–¶–µ–Ω–∞', 'std'): '${:.2f}',
        ('–¶–µ–Ω–∞', 'min'): '${:.2f}',
        ('–¶–µ–Ω–∞', 'max'): '${:.2f}'
    }))
    
    show_popular_varieties(filtered_data)
    show_price_stats(filtered_data)
    
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("–¢–æ–ø-5 –ø–æ —Ü–µ–Ω–µ")
        st.dataframe(filtered_data.nlargest(5, '–¶–µ–Ω–∞')[['–í–∏–Ω–æ–¥–µ–ª—å–Ω—è', '–°—Ç—Ä–∞–Ω–∞', '–†–µ–π—Ç–∏–Ω–≥', '–¶–µ–Ω–∞']])
    with col2:
        st.subheader("–¢–æ–ø-5 –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É")
        st.dataframe(filtered_data.nlargest(5, '–†–µ–π—Ç–∏–Ω–≥')[['–í–∏–Ω–æ–¥–µ–ª—å–Ω—è', '–°—Ç—Ä–∞–Ω–∞', '–†–µ–π—Ç–∏–Ω–≥', '–¶–µ–Ω–∞']])

def show_popular_varieties(data):
    st.subheader("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–æ—Ä—Ç–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
    region_variety = data.groupby(['–°—Ç—Ä–∞–Ω–∞', '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è', '–°–æ—Ä—Ç']).size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    top_by_region = region_variety.sort_values(['–°—Ç—Ä–∞–Ω–∞', '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], ascending=[True, True, False])
    
    for country in top_by_region['–°—Ç—Ä–∞–Ω–∞'].unique():
        st.write(f"**{country}**")
        country_data = top_by_region[top_by_region['–°—Ç—Ä–∞–Ω–∞'] == country]
        st.dataframe(country_data.groupby('–ü—Ä–æ–≤–∏–Ω—Ü–∏—è').first().reset_index()[['–ü—Ä–æ–≤–∏–Ω—Ü–∏—è', '–°–æ—Ä—Ç', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']])

def show_price_stats(data):
    st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
    price_stats = data.groupby(['–°—Ç—Ä–∞–Ω–∞', '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è'])['–¶–µ–Ω–∞'].agg(
        ['mean', 'median', 'min', 'max', 'std', 'count']
    ).reset_index()
    st.dataframe(price_stats.style.format({
        'mean': '${:.2f}', 'median': '${:.2f}', 
        'min': '${:.2f}', 'max': '${:.2f}', 
        'std': '${:.2f}'
    }))

def show_visualizations(filtered_data, variety):
    st.header("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    fig = create_summary_plot(filtered_data, variety)
    if fig:
        st.pyplot(fig)
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏")
    
    st.plotly_chart(px.scatter(
        filtered_data,
        x='–†–µ–π—Ç–∏–Ω–≥',
        y='–¶–µ–Ω–∞',
        color='–°—Ç—Ä–∞–Ω–∞',
        hover_data=['–í–∏–Ω–æ–¥–µ–ª—å–Ω—è', '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è'],
        title=f'–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {variety}',
        size_max=15
    ), use_container_width=True)
    
    show_rating_by_region(filtered_data)
    show_price_by_region(filtered_data)
    show_correlation_analysis(filtered_data)

def show_rating_by_region(data):
    st.subheader("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞")
    fig = create_rating_by_region_plot(data)
    if fig:
        st.pyplot(fig)
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")

def show_price_by_region(data):
    st.subheader("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
    fig = create_price_by_region_plot(data)
    if fig:
        st.pyplot(fig)
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")

def show_correlation_analysis(data):
    st.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–º")
    fig, corr = create_correlation_plot(data)
    if fig:
        st.pyplot(fig)
        st.write(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {corr:.2f}")
        
        if abs(corr) > 0.3:
            st.write("‚úÖ –ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è –∑–∞–º–µ—Ç–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è")
        else:
            st.write("‚ùå –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å–ª–∞–±–∞—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")

def show_text_analysis(filtered_data, variety):
    st.header("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞")
    
    wc_fig = create_wordcloud(filtered_data, variety)
    if wc_fig:
        st.pyplot(wc_fig)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤")
    
    sentiment_fig, sentiment_data = analyze_sentiment(filtered_data)
    if sentiment_fig:
        st.pyplot(sentiment_fig)
        st.subheader("–ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π")
        col1, col2 = st.columns(2)
        with col1:
            st.write("–°–∞–º—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ:")
            positive = sentiment_data.nlargest(3, 'sentiment')['–û–ø–∏—Å–∞–Ω–∏–µ']
            for i, desc in enumerate(positive, 1):
                st.write(f"{i}. {desc[:200]}...")
        with col2:
            st.write("–°–∞–º—ã–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ:")
            negative = sentiment_data.nsmallest(3, 'sentiment')['–û–ø–∏—Å–∞–Ω–∏–µ']
            for i, desc in enumerate(negative, 1):
                st.write(f"{i}. {desc[:200]}...")
    else:
        st.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")

def show_geographical_analysis(filtered_data):
    st.header("–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
    map_data, region_stats = create_geographical_analysis(filtered_data)
    if map_data:
        st.pyplot(map_data)
        st.dataframe(region_stats.sort_values('–†–µ–π—Ç–∏–Ω–≥', ascending=False))
    else:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")

def show_report_generation(filtered_data, variety):
    st.header("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
    if st.button("üñ®Ô∏è –°–æ–∑–¥–∞—Ç—å PDF –æ—Ç—á–µ—Ç"):
        with st.spinner("–§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç..."):
            pdf_path = generate_pdf_report(filtered_data, variety)
            if pdf_path:
                with open(pdf_path, "rb") as f:
                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                        data=f,
                        file_name=f"wine_analysis_{variety}_{datetime.now().strftime('%Y%m%d')}.pdf",
                        mime="application/pdf"
                    )
                os.unlink(pdf_path)
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –æ—Ç—á–µ—Ç")

def main():
    st.title("üç∑ –õ—É—á—à–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–æ—á–∫–∏) —Å–∏—Å—Ç–µ–º–∞")
    st.markdown("### –ö–æ—Ç–æ—Ä–∞—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ, —á—Ç–æ –ª—É—á—à–µ –ø–∏—Ç—å, —á–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —à—Ä–∏—Ñ—Ç–∞
    st.sidebar.markdown("""
    ### –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã:
    1. –í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ê–≤—Å—Ç—Ä–∞–ª–∏—è –∏ –ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è)
    2. –í—ã–±–µ—Ä–∏ —Å–æ—Ä—Ç –≤–∏–Ω–∞. –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤–∏–Ω–∞ - –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞
    3. –î–∞–ª—å—à–µ - –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–∏ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    4. –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–∫–ª–∞–¥–∫–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å PDF –∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.
    5. –ü–∏—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —á—Ç–æ —Ç–µ–±–µ –≤–æ–æ–±—â–µ –Ω–∞–¥–æ. –Ø —Ç—É—Ç –Ω–∞–∫–∏–¥–∞–ª –≤—Å–µ–≥–æ –ø–æ–¥—Ä—è–¥ =)
    """)
    
    if 'analyzed' not in st.session_state:
        st.session_state.analyzed = False
        st.session_state.filtered_data = None
    
    with st.expander("üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", expanded=True):
        st.markdown("""
        ### –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º:
        1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª** —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–∏–Ω–∞—Ö (CSV –∏–ª–∏ Excel)
        2. **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã** –∏ **—Å–æ—Ä—Ç –≤–∏–Ω–∞** –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        3. **–ù–∞–∂–º–∏—Ç–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"** –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        4. **–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ PDF –æ—Ç—á–µ—Ç** –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        """)
    
    uploaded_file = st.sidebar.file_uploader(
        "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏",
        type=["csv", "xlsx"],
        accept_multiple_files=False
    )
    
    if uploaded_file is not None:
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            data = load_data(uploaded_file)
        
        if data is not None:
            st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
            
            st.sidebar.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
            
            col1, col2 = st.sidebar.columns(2)
            with col1:
                all_countries = sorted(data['–°—Ç—Ä–∞–Ω–∞'].unique())
                default_countries = []
                if '–ê–≤—Å—Ç—Ä–∞–ª–∏—è' in all_countries:
                    default_countries.append('–ê–≤—Å—Ç—Ä–∞–ª–∏—è')
                if '–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è' in all_countries:
                    default_countries.append('–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è')
                
                if not default_countries and len(all_countries) >= 2:
                    default_countries = all_countries[:2]
                
                countries = st.multiselect(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã",
                    options=all_countries,
                    default=default_countries
                )

            with col2:
                variety = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç",
                    options=sorted(data['–°–æ—Ä—Ç'].unique())
                )
            
            st.sidebar.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
            min_rating = st.sidebar.slider(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥",
                min_value=80, max_value=100, value=85
            )
            max_price = st.sidebar.slider(
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ ($)",
                min_value=0, max_value=1000, value=500
            )
            
            if st.sidebar.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑..."):
                    st.session_state.filtered_data = data[
                        (data['–°—Ç—Ä–∞–Ω–∞'].isin(countries)) & 
                        (data['–°–æ—Ä—Ç'].str.contains(variety, case=False, na=False)) &
                        (data['–†–µ–π—Ç–∏–Ω–≥'] >= min_rating) &
                        (data['–¶–µ–Ω–∞'] <= max_price)
                    ].copy()
                    st.session_state.analyzed = True
            
            if st.session_state.analyzed and st.session_state.filtered_data is not None:
                filtered_data = st.session_state.filtered_data
                
                if len(filtered_data) == 0:
                    st.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                else:
                    tab1, tab2, tab3, tab4, tab5 = st.tabs([
                        "üìä –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                        "üìà –ì—Ä–∞—Ñ–∏–∫–∏", 
                        "üìù –¢–µ–∫—Å—Ç–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", 
                        "üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", 
                        "üìÑ –û—Ç—á–µ—Ç"
                    ])
                    
                    with tab1:
                        show_basic_stats(filtered_data)
                    
                    with tab2:
                        show_visualizations(filtered_data, variety)
                    
                    with tab3:
                        show_text_analysis(filtered_data, variety)
                    
                    with tab4:
                        show_geographical_analysis(filtered_data)
                    
                    with tab5:
                        show_report_generation(filtered_data, variety)

if __name__ == "__main__":
    # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    os.system("pip uninstall --yes pypdf")
    os.system("pip install --upgrade fpdf2")
    
    main()
