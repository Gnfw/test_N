# -*- coding: utf-8 -*-
# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import os
import textwrap
from matplotlib import gridspec
from io import BytesIO
import hashlib
import logging
import plotly.express as px
from wordcloud import WordCloud
from textblob import TextBlob
import folium
from streamlit_folium import st_folium
from datetime import datetime
import tempfile
from fpdf import FPDF
import base64
import re

# ============================================
# –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================================

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="üç∑ –í–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ Pro",
    page_icon="üç∑",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ============================================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ò –°–õ–û–í–ê–†–ò
# ============================================

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
COLUMN_TRANSLATION = {
    'country': '–°—Ç—Ä–∞–Ω–∞',
    'points': '–†–µ–π—Ç–∏–Ω–≥',
    'price': '–¶–µ–Ω–∞',
    'variety': '–°–æ—Ä—Ç',
    'winery': '–í–∏–Ω–æ–¥–µ–ª—å–Ω—è',
    'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
    'province': '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è',
    'region_1': '–†–µ–≥–∏–æ–Ω'
}

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
STAT_TRANSLATION = {
    'mean': '–°—Ä–µ–¥–Ω–µ–µ',
    'median': '–ú–µ–¥–∏–∞–Ω–∞',
    'std': '–°—Ç–∞–Ω–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ',
    'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
}

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω
COUNTRY_TRANSLATION = {
    'Australia': '–ê–≤—Å—Ç—Ä–∞–ª–∏—è',
    'New Zealand': '–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è',
    'US': '–°–®–ê',
    'France': '–§—Ä–∞–Ω—Ü–∏—è',
    'Italy': '–ò—Ç–∞–ª–∏—è',
    'Spain': '–ò—Å–ø–∞–Ω–∏—è',
    'Portugal': '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è',
    'Chile': '–ß–∏–ª–∏',
    'Argentina': '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞'
}

# ============================================
# –ö–õ–ê–°–° –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò PDF
# ============================================

class WinePDF(FPDF):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF –æ—Ç—á–µ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
    def __init__(self):
        super().__init__()
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç DejaVu
            font_path = os.path.join(os.path.dirname(__file__), "fonts", "DejaVuSans.ttf")
            self.add_font("DejaVu", "", font_path, uni=True)
            self.set_font("DejaVu", size=10)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç DejaVu: {e}")
            self.set_font("helvetica", size=10)  # –†–µ–∑–µ—Ä–≤–Ω—ã–π —à—Ä–∏—Ñ—Ç

    def safe_cell(self, w, h=0, txt="", border=0, ln=0, align="L"):
        """–Ø—á–µ–π–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å—Ç—Ä–æ–π–∫–æ–π —à–∏—Ä–∏–Ω—ã"""
        required_width = self.get_string_width(txt) + 2  # +2 –º–º –∑–∞–ø–∞—Å–∞
        effective_width = max(w, required_width)
        self.cell(effective_width, h, txt, border, ln, align)

# ============================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò
# ============================================

def translate_data(df):
    """–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–π"""
    try:
        # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
        df = df.rename(columns=lambda x: COLUMN_TRANSLATION.get(x.lower(), x))
        
        # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç—Ä–∞–Ω
        if '–°—Ç—Ä–∞–Ω–∞' in df.columns:
            df['–°—Ç—Ä–∞–Ω–∞'] = df['–°—Ç—Ä–∞–Ω–∞'].map(COUNTRY_TRANSLATION).fillna(df['–°—Ç—Ä–∞–Ω–∞'])
            
        return df
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return df

def load_data(uploaded_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
        if uploaded_file.size == 0:
            raise ValueError("–§–∞–π–ª –ø—É—Å—Ç–æ–π")

        # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        file_content = uploaded_file.read()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV
        if uploaded_file.name.endswith('.csv'):
            encodings = ['utf-8', 'windows-1251', 'latin1', 'cp1252']
            for encoding in encodings:
                try:
                    df = pd.read_csv(BytesIO(file_content), encoding=encoding, on_bad_lines='warn')
                    if not df.empty:
                        break
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}: {e}")
            else:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV —Ñ–∞–π–ª")
                
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel
        elif uploaded_file.name.endswith(('.xls', '.xlsx')):
            try:
                df = pd.read_excel(BytesIO(file_content), engine='openpyxl')
            except Exception as e:
                raise ValueError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
        else:
            raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ CSV –∏ Excel —Ñ–∞–π–ª—ã")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        if df.empty:
            raise ValueError("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        required_cols = {'country', 'points', 'price', 'variety'}
        available_cols = set(col.lower() for col in df.columns)
        missing_cols = required_cols - available_cols
        
        if missing_cols:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {missing_cols}")

        # –ü–µ—Ä–µ–≤–æ–¥ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = translate_data(df)
        df = df.dropna(subset=['–†–µ–π—Ç–∏–Ω–≥', '–¶–µ–Ω–∞']).drop_duplicates()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if '–û–ø–∏—Å–∞–Ω–∏–µ' in df.columns:
            df['–ì–æ–¥'] = df['–û–ø–∏—Å–∞–Ω–∏–µ'].str.extract(r'(19|20\d{2})')[0]
        
        return df

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

# ============================================
# –§–£–ù–ö–¶–ò–ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò
# ============================================

def create_summary_plot(data, variety):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    try:
        fig = plt.figure(figsize=(18, 14))
        gs = gridspec.GridSpec(3, 2, height_ratios=[1, 1, 0.7])
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        ax1 = plt.subplot(gs[0, 0])
        sns.boxplot(x='–°—Ç—Ä–∞–Ω–∞', y='–†–µ–π—Ç–∏–Ω–≥', data=data, ax=ax1)
        ax1.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ ({variety})', fontsize=12)
        ax1.tick_params(axis='x', rotation=45)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω
        ax2 = plt.subplot(gs[0, 1])
        sns.boxplot(x='–°—Ç—Ä–∞–Ω–∞', y='–¶–µ–Ω–∞', data=data, ax=ax2)
        ax2.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω ({variety})', fontsize=12)
        ax2.tick_params(axis='x', rotation=45)
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
        ax3 = plt.subplot(gs[1, 0])
        sns.scatterplot(x='–†–µ–π—Ç–∏–Ω–≥', y='–¶–µ–Ω–∞', hue='–°—Ç—Ä–∞–Ω–∞', data=data, ax=ax3, alpha=0.7)
        ax3.set_title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞', fontsize=12)
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        ax4 = plt.subplot(gs[1, 1])
        if '–ì–æ–¥' in data.columns:
            data['–ì–æ–¥'] = pd.to_numeric(data['–ì–æ–¥'], errors='coerce')
            year_counts = data.dropna(subset=['–ì–æ–¥']).groupby(['–°—Ç—Ä–∞–Ω–∞', '–ì–æ–¥']).size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            if not year_counts.empty:
                sns.lineplot(x='–ì–æ–¥', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', hue='–°—Ç—Ä–∞–Ω–∞', data=year_counts, ax=ax4)
                ax4.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º', fontsize=12)
            else:
                ax4.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ–¥–∞–º', ha='center', va='center')
                ax4.axis('off')
        else:
            ax4.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–¥–µ', ha='center', va='center')
            ax4.axis('off')
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        ax5 = plt.subplot(gs[2, :])
        ax5.axis('off')
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = []
        for country in data['–°—Ç—Ä–∞–Ω–∞'].unique():
            country_data = data[data['–°—Ç—Ä–∞–Ω–∞'] == country]
            avg_rating = country_data['–†–µ–π—Ç–∏–Ω–≥'].mean()
            avg_price = country_data['–¶–µ–Ω–∞'].mean()
            stats_text.append(f"{country}: –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ {avg_rating:.1f}, –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ ${avg_price:.1f}")
        
        ax5.text(0.05, 0.95, "\n".join(stats_text), 
                ha='left', va='top', fontsize=11,
                bbox={'facecolor': 'lightgray', 'alpha': 0.2, 'pad': 10})
        
        plt.tight_layout()
        return fig
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π: {str(e)}")
        return None

def create_wordcloud(data, variety):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤"""
    try:
        if '–û–ø–∏—Å–∞–Ω–∏–µ' not in data.columns:
            return None
            
        text = ' '.join(data['–û–ø–∏—Å–∞–Ω–∏–µ'].dropna().astype(str))
        wordcloud = WordCloud(
            width=800, 
            height=400,
            background_color='white',
            stopwords=None,
            min_font_size=10
        ).generate(text)
        
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.imshow(wordcloud, interpolation='bilinear')
        ax.axis("off")
        ax.set_title(f'–ß–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö {variety}', fontsize=12)
        return fig
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤: {e}")
        return None

def analyze_sentiment(data):
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–π"""
    try:
        if '–û–ø–∏—Å–∞–Ω–∏–µ' not in data.columns:
            return None, None
            
        data['sentiment'] = data['–û–ø–∏—Å–∞–Ω–∏–µ'].apply(
            lambda x: TextBlob(str(x)).sentiment.polarity if pd.notna(x) else 0)
        
        fig = px.box(
            data,
            x='–°—Ç—Ä–∞–Ω–∞',
            y='sentiment',
            color='–°—Ç—Ä–∞–Ω–∞',
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–π'
        )
        return fig, data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return None, None

def create_geographical_analysis(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã"""
    try:
        if '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è' not in data.columns or '–†–µ–≥–∏–æ–Ω' not in data.columns:
            return None, None
            
        region_stats = data.groupby(['–°—Ç—Ä–∞–Ω–∞', '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è', '–†–µ–≥–∏–æ–Ω']).agg({
            '–†–µ–π—Ç–∏–Ω–≥': 'mean',
            '–¶–µ–Ω–∞': 'mean',
            '–°–æ—Ä—Ç': 'count'
        }).reset_index()
        
        m = folium.Map(location=[20, 0], zoom_start=2)
        
        for _, row in region_stats.iterrows():
            folium.Marker(
                location=[np.random.uniform(-60, 70), np.random.uniform(-180, 180)],
                popup=f"{row['–†–µ–≥–∏–æ–Ω']}<br>–†–µ–π—Ç–∏–Ω–≥: {row['–†–µ–π—Ç–∏–Ω–≥']:.1f}<br>–¶–µ–Ω–∞: ${row['–¶–µ–Ω–∞']:.1f}",
                tooltip=row['–†–µ–≥–∏–æ–Ω']
            ).add_to(m)
            
        return m, region_stats
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã: {e}")
        return None, None

# ============================================
# PDF –û–¢–ß–ï–¢
# ============================================

def generate_pdf_report(data, variety):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞"""
    try:
        pdf = WinePDF()
        pdf.add_page()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        pdf.set_font(size=16)
        pdf.safe_cell(0, 10, f"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç: {variety}", ln=1, align="C")
        pdf.ln(10)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        pdf.set_font(size=12)
        pdf.safe_cell(0, 10, "–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", ln=1)
        
        stats = data.groupby('–°—Ç—Ä–∞–Ω–∞').agg({
            '–†–µ–π—Ç–∏–Ω–≥': ['mean', 'median', 'std'],
            '–¶–µ–Ω–∞': ['mean', 'median', 'std'],
            '–°–æ—Ä—Ç': 'count'
        })
        
        for country in stats.index:
            text = (f"{country}: "
                   f"–†–µ–π—Ç–∏–Ω–≥ {stats.loc[country, ('–†–µ–π—Ç–∏–Ω–≥', 'mean')]:.1f}¬±{stats.loc[country, ('–†–µ–π—Ç–∏–Ω–≥', 'std')]:.1f}, "
                   f"–¶–µ–Ω–∞ ${stats.loc[country, ('–¶–µ–Ω–∞', 'mean')]:.1f}¬±{stats.loc[country, ('–¶–µ–Ω–∞', 'std')]:.1f}, "
                   f"–ù–∞–π–¥–µ–Ω–æ {int(stats.loc[country, ('–°–æ—Ä—Ç', 'count')])} –æ–±—Ä–∞–∑—Ü–æ–≤")
            pdf.safe_cell(0, 8, text, ln=1)
        
        # –¢–æ–ø –≤–∏–Ω
        pdf.ln(5)
        pdf.safe_cell(0, 10, "–¢–æ–ø-5 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –≤–∏–Ω:", ln=1)
        
        top_wines = data.nlargest(5, '–¶–µ–Ω–∞')[['–í–∏–Ω–æ–¥–µ–ª—å–Ω—è', '–°—Ç—Ä–∞–Ω–∞', '–†–µ–π—Ç–∏–Ω–≥', '–¶–µ–Ω–∞']]
        for _, row in top_wines.iterrows():
            text = f"{row['–í–∏–Ω–æ–¥–µ–ª—å–Ω—è']} ({row['–°—Ç—Ä–∞–Ω–∞']}): {row['–†–µ–π—Ç–∏–Ω–≥']} –±–∞–ª–ª–æ–≤, ${row['–¶–µ–Ω–∞']:.2f}"
            pdf.safe_cell(0, 8, text, ln=1)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
        pdf.output(temp_file.name)
        return temp_file.name
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        return None

# ============================================
# –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–°
# ============================================

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("üç∑ –í–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ Pro")
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    with st.expander("üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", expanded=True):
        st.markdown("""
        ### –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º:
        1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª** —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–∏–Ω–∞—Ö (CSV –∏–ª–∏ Excel)
        2. **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã** –∏ **—Å–æ—Ä—Ç –≤–∏–Ω–∞** –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        3. **–ù–∞–∂–º–∏—Ç–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"** –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        4. **–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ PDF –æ—Ç—á–µ—Ç** –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

        ### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º:
        - –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:  
          `country`, `points`, `price`, `variety`
        - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: CSV (UTF-8, Windows-1251), Excel (XLSX)
        """)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    uploaded_file = st.sidebar.file_uploader(
        "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏",
        type=["csv", "xlsx"],
        help="–í—ã–±–µ—Ä–∏—Ç–µ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–∏–Ω–∞—Ö"
    )
    
    if uploaded_file is not None:
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            data = load_data(uploaded_file)
        
        if data is not None:
            st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
            
            # –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
            st.sidebar.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
            
            col1, col2 = st.sidebar.columns(2)
            with col1:
                countries = st.multiselect(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã",
                    options=sorted(data['–°—Ç—Ä–∞–Ω–∞'].unique()),
                    default=data['–°—Ç—Ä–∞–Ω–∞'].unique()[:2]
                )
            with col2:
                variety = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç",
                    options=sorted(data['–°–æ—Ä—Ç'].unique())
                )
            
            # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
            if st.sidebar.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑..."):
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                    filtered_data = data[
                        data['–°—Ç—Ä–∞–Ω–∞'].isin(countries) & 
                        data['–°–æ—Ä—Ç'].str.contains(variety, case=False, na=False)
                    ]
                    
                    if len(filtered_data) == 0:
                        st.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                    else:
                        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
                        tab1, tab2, tab3, tab4, tab5 = st.tabs([
                            "üìä –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                            "üìà –ì—Ä–∞—Ñ–∏–∫–∏", 
                            "üìù –¢–µ–∫—Å—Ç–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", 
                            "üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", 
                            "üìÑ –û—Ç—á–µ—Ç"
                        ])
                        
                        with tab1:
                            st.header("–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                            stats = filtered_data.groupby('–°—Ç—Ä–∞–Ω–∞').agg({
                                '–†–µ–π—Ç–∏–Ω–≥': ['mean', 'median', 'std', 'count'],
                                '–¶–µ–Ω–∞': ['mean', 'median', 'std']
                            })
                            st.dataframe(stats.style.format({
                                ('–†–µ–π—Ç–∏–Ω–≥', 'mean'): '{:.1f}',
                                ('–†–µ–π—Ç–∏–Ω–≥', 'median'): '{:.1f}',
                                ('–†–µ–π—Ç–∏–Ω–≥', 'std'): '{:.2f}',
                                ('–¶–µ–Ω–∞', 'mean'): '${:.2f}',
                                ('–¶–µ–Ω–∞', 'median'): '${:.2f}',
                                ('–¶–µ–Ω–∞', 'std'): '${:.2f}'
                            }))
                            
                            col1, col2 = st.columns(2)
                            with col1:
                                st.subheader("–¢–æ–ø-5 –ø–æ —Ü–µ–Ω–µ")
                                st.dataframe(filtered_data.nlargest(5, '–¶–µ–Ω–∞')[['–í–∏–Ω–æ–¥–µ–ª—å–Ω—è', '–°—Ç—Ä–∞–Ω–∞', '–†–µ–π—Ç–∏–Ω–≥', '–¶–µ–Ω–∞']])
                            with col2:
                                st.subheader("–¢–æ–ø-5 –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É")
                                st.dataframe(filtered_data.nlargest(5, '–†–µ–π—Ç–∏–Ω–≥')[['–í–∏–Ω–æ–¥–µ–ª—å–Ω—è', '–°—Ç—Ä–∞–Ω–∞', '–†–µ–π—Ç–∏–Ω–≥', '–¶–µ–Ω–∞']])
                        
                        with tab2:
                            st.header("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
                            fig = create_summary_plot(filtered_data, variety)
                            if fig:
                                st.pyplot(fig)
                            else:
                                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏")
                            
                            st.plotly_chart(px.scatter(
                                filtered_data,
                                x='–†–µ–π—Ç–∏–Ω–≥',
                                y='–¶–µ–Ω–∞',
                                color='–°—Ç—Ä–∞–Ω–∞',
                                hover_data=['–í–∏–Ω–æ–¥–µ–ª—å–Ω—è', '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è'],
                                title=f'–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {variety}',
                                size_max=15
                            ), use_container_width=True)
                        
                        with tab3:
                            st.header("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞")
                            wc_fig = create_wordcloud(filtered_data, variety)
                            if wc_fig:
                                st.pyplot(wc_fig)
                            else:
                                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤")
                            
                            sentiment_fig, sentiment_data = analyze_sentiment(filtered_data)
                            if sentiment_fig:
                                st.plotly_chart(sentiment_fig)
                                st.subheader("–ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π")
                                col1, col2 = st.columns(2)
                                with col1:
                                    st.write("–°–∞–º—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ:")
                                    positive = sentiment_data.nlargest(3, 'sentiment')['–û–ø–∏—Å–∞–Ω–∏–µ']
                                    for i, desc in enumerate(positive, 1):
                                        st.write(f"{i}. {desc[:200]}...")
                                with col2:
                                    st.write("–°–∞–º—ã–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ:")
                                    negative = sentiment_data.nsmallest(3, 'sentiment')['–û–ø–∏—Å–∞–Ω–∏–µ']
                                    for i, desc in enumerate(negative, 1):
                                        st.write(f"{i}. {desc[:200]}...")
                            else:
                                st.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
                        
                        with tab4:
                            st.header("–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
                            map_data, region_stats = create_geographical_analysis(filtered_data)
                            if map_data:
                                st_folium(map_data, width=800, height=500)
                                st.dataframe(region_stats.sort_values('–†–µ–π—Ç–∏–Ω–≥', ascending=False))
                            else:
                                st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                        
                        with tab5:
                            st.header("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
                            if st.button("üñ®Ô∏è –°–æ–∑–¥–∞—Ç—å PDF –æ—Ç—á–µ—Ç"):
                                with st.spinner("–§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç..."):
                                    pdf_path = generate_pdf_report(filtered_data, variety)
                                    if pdf_path:
                                        with open(pdf_path, "rb") as f:
                                            st.download_button(
                                                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                                                data=f,
                                                file_name=f"wine_analysis_{variety}_{datetime.now().strftime('%Y%m%d')}.pdf",
                                                mime="application/pdf"
                                            )
                                        os.unlink(pdf_path)
                                    else:
                                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –æ—Ç—á–µ—Ç")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    main()
