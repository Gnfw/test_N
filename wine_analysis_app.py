# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import os
import textwrap
from matplotlib import gridspec
from io import StringIO
import hashlib
import logging
import plotly.express as px
from wordcloud import WordCloud
from textblob import TextBlob
import folium
from streamlit_folium import st_folium
from datetime import datetime
import tempfile
from fpdf import FPDF
import base64
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∏–Ω",
    page_icon="üç∑",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
pd.set_option('display.max_columns', None)
plt.style.use('ggplot')
plt.rcParams['figure.figsize'] = (16, 10)
sns.set_palette("husl")

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
column_translation = {
    'country': '–°—Ç—Ä–∞–Ω–∞',
    'points': '–†–µ–π—Ç–∏–Ω–≥',
    'price': '–¶–µ–Ω–∞',
    'variety': '–°–æ—Ä—Ç',
    'winery': '–í–∏–Ω–æ–¥–µ–ª—å–Ω—è',
    'year': '–ì–æ–¥',
    'province': '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è',
    'region_1': '–†–µ–≥–∏–æ–Ω 1',
    'region_2': '–†–µ–≥–∏–æ–Ω 2',
    'description': '–û–ø–∏—Å–∞–Ω–∏–µ'
}

stat_translation = {
    'mean': '–°—Ä–µ–¥–Ω–µ–µ',
    'median': '–ú–µ–¥–∏–∞–Ω–∞',
    'std': '–°—Ç–∞–Ω–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ',
    'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
}

country_translation = {
    'Australia': '–ê–≤—Å—Ç—Ä–∞–ª–∏—è',
    'New Zealand': '–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è',
    'US': '–°–®–ê',
    'France': '–§—Ä–∞–Ω—Ü–∏—è',
    'Italy': '–ò—Ç–∞–ª–∏—è',
    'Spain': '–ò—Å–ø–∞–Ω–∏—è',
    'Portugal': '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è',
    'Chile': '–ß–∏–ª–∏',
    'Argentina': '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞'
}

class PDF(FPDF):
    def __init__(self):
        super().__init__()
        try:
            font_path = os.path.join(os.path.dirname(__file__), "fonts", "DejaVuSans.ttf")
            self.add_font("DejaVu", "", font_path, uni=True)
            self.set_font("DejaVu", size=10)
        except:
            self.set_font("helvetica", size=10)

    def safe_cell(self, w, h=0, txt="", border=0, ln=0, align="L"):
        required_width = self.get_string_width(txt) + 2
        self.cell(w if w > required_width else required_width, h, txt, border, ln, align)

def translate_data(df):
    df = df.rename(columns=column_translation)
    if '–°—Ç—Ä–∞–Ω–∞' in df.columns:
        df['–°—Ç—Ä–∞–Ω–∞'] = df['–°—Ç—Ä–∞–Ω–∞'].replace(country_translation)
    return df

def translate_stats(df):
    try:
        translated = df.copy()
        if isinstance(translated.index, pd.MultiIndex):
            new_index = []
            for level in translated.index.levels:
                if level.name in stat_translation:
                    new_index.append(level.map(stat_translation))
                else:
                    new_index.append(level)
            translated.index = pd.MultiIndex.from_arrays(new_index, names=translated.index.names)
        else:
            if translated.index.name in stat_translation:
                translated.index = translated.index.map(lambda x: stat_translation.get(x, x))
        return translated
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return df

def get_file_hash(uploaded_file):
    uploaded_file.seek(0)
    return hashlib.md5(uploaded_file.read()).hexdigest()

def extract_year_from_description(description):
    try:
        if pd.isna(description):
            return None
        matches = re.findall(r'(19|20\d{2})', str(description))
        return int(matches[0]) if matches else None
    except:
        return None

def load_data(uploaded_file, use_cache=True):
    try:
        file_hash = get_file_hash(uploaded_file)
        cache_key = f"wine_data_{file_hash}"
        
        if not use_cache or cache_key not in st.session_state:
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file, encoding='utf-8', on_bad_lines='skip')
            elif uploaded_file.name.endswith(('.xls', '.xlsx')):
                df = pd.read_excel(uploaded_file)
            else:
                st.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
                return None
                
            df = translate_data(df)
            if '–û–ø–∏—Å–∞–Ω–∏–µ' in df.columns:
                df['–ì–æ–¥'] = df['–û–ø–∏—Å–∞–Ω–∏–µ'].apply(extract_year_from_description)
            df = df.dropna(subset=['–†–µ–π—Ç–∏–Ω–≥', '–¶–µ–Ω–∞'])
            df = df.drop_duplicates()
            
            if use_cache:
                st.session_state[cache_key] = df
            return df
        return st.session_state[cache_key]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

def create_summary_plot(data, filtered_data, variety):
    fig = plt.figure(figsize=(20, 15))
    gs = gridspec.GridSpec(3, 2, height_ratios=[1, 1, 0.5])
    
    ax1 = plt.subplot(gs[0, 0])
    sns.boxplot(x='–°—Ç—Ä–∞–Ω–∞', y='–†–µ–π—Ç–∏–Ω–≥', data=filtered_data, ax=ax1)
    ax1.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ {variety}')
    
    ax2 = plt.subplot(gs[0, 1])
    sns.boxplot(x='–°—Ç—Ä–∞–Ω–∞', y='–¶–µ–Ω–∞', data=filtered_data, ax=ax2)
    ax2.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω {variety}')
    
    ax3 = plt.subplot(gs[1, 0])
    sns.scatterplot(x='–†–µ–π—Ç–∏–Ω–≥', y='–¶–µ–Ω–∞', hue='–°—Ç—Ä–∞–Ω–∞', data=filtered_data, ax=ax3, alpha=0.7)
    ax3.set_title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞')
    
    ax4 = plt.subplot(gs[1, 1])
    if '–ì–æ–¥' in filtered_data.columns:
        filtered_data['–ì–æ–¥'] = pd.to_numeric(filtered_data['–ì–æ–¥'], errors='coerce')
        filtered_data = filtered_data.dropna(subset=['–ì–æ–¥'])
        year_counts = filtered_data.groupby(['–°—Ç—Ä–∞–Ω–∞', '–ì–æ–¥']).size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        if not year_counts.empty:
            pivot_data = year_counts.pivot(index='–ì–æ–¥', columns='–°—Ç—Ä–∞–Ω–∞', values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            pivot_data.plot(kind='bar', stacked=True, ax=ax4)
            ax4.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º')
    
    ax5 = plt.subplot(gs[2, :])
    ax5.axis('off')
    plt.tight_layout()
    return fig

def create_interactive_plot(data, variety):
    fig = px.scatter(
        data,
        x='–†–µ–π—Ç–∏–Ω–≥',
        y='–¶–µ–Ω–∞',
        color='–°—Ç—Ä–∞–Ω–∞',
        hover_data=['–í–∏–Ω–æ–¥–µ–ª—å–Ω—è', '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è', '–†–µ–≥–∏–æ–Ω 1'],
        title=f'–ê–Ω–∞–ª–∏–∑ {variety}',
        size_max=15
    )
    fig.update_layout(height=600, width=800)
    return fig

def create_wordcloud(data, variety):
    text = ' '.join(data['–û–ø–∏—Å–∞–Ω–∏–µ'].dropna().astype(str))
    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.imshow(wordcloud, interpolation='bilinear')
    ax.axis("off")
    return fig

def analyze_sentiment(data):
    data['sentiment'] = data['–û–ø–∏—Å–∞–Ω–∏–µ'].apply(
        lambda x: TextBlob(str(x)).sentiment.polarity if pd.notna(x) else 0)
    fig = px.box(data, x='–°—Ç—Ä–∞–Ω–∞', y='sentiment', color='–°—Ç—Ä–∞–Ω–∞')
    return fig, data

def create_geographical_analysis(data):
    if '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è' not in data.columns:
        return None
    
    region_stats = data.groupby(['–°—Ç—Ä–∞–Ω–∞', '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è', '–†–µ–≥–∏–æ–Ω 1']).agg({
        '–†–µ–π—Ç–∏–Ω–≥': 'mean',
        '–¶–µ–Ω–∞': 'mean',
        '–°–æ—Ä—Ç': 'count'
    }).reset_index()
    
    m = folium.Map(location=[20, 0], zoom_start=2)
    for _, row in region_stats.iterrows():
        folium.Marker(
            location=[np.random.uniform(-60, 70), np.random.uniform(-180, 180)],
            popup=f"{row['–†–µ–≥–∏–æ–Ω 1']}<br>–†–µ–π—Ç–∏–Ω–≥: {row['–†–µ–π—Ç–∏–Ω–≥']:.1f}<br>–¶–µ–Ω–∞: ${row['–¶–µ–Ω–∞']:.1f}"
        ).add_to(m)
    return m, region_stats

def create_pdf_report(data, variety, stats):
    try:
        pdf = PDF()
        pdf.add_page()
        pdf.set_font(size=16)
        pdf.safe_cell(0, 10, f"–ê–Ω–∞–ª–∏–∑ –≤–∏–Ω: {variety}", ln=1, align="C")
        pdf.ln(10)
        
        pdf.set_font(size=12)
        pdf.safe_cell(0, 10, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º:", ln=1)
        for country in stats.index:
            text = f"{country}: –†–µ–π—Ç–∏–Ω–≥ {stats.loc[country, ('–†–µ–π—Ç–∏–Ω–≥', 'mean')]:.1f}, –¶–µ–Ω–∞ ${stats.loc[country, ('–¶–µ–Ω–∞', 'mean')]:.1f}"
            pdf.safe_cell(0, 10, text, ln=1)
        
        pdf.ln(5)
        pdf.safe_cell(0, 10, "–¢–æ–ø-5 –≤–∏–Ω:", ln=1)
        for _, row in data.nlargest(5, '–¶–µ–Ω–∞')[['–í–∏–Ω–æ–¥–µ–ª—å–Ω—è', '–°—Ç—Ä–∞–Ω–∞', '–†–µ–π—Ç–∏–Ω–≥', '–¶–µ–Ω–∞']].iterrows():
            text = f"{row['–í–∏–Ω–æ–¥–µ–ª—å–Ω—è']} ({row['–°—Ç—Ä–∞–Ω–∞']}): {row['–†–µ–π—Ç–∏–Ω–≥']} –±–∞–ª–ª–æ–≤, ${row['–¶–µ–Ω–∞']}"
            pdf.safe_cell(0, 10, text, ln=1)
        
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
        pdf.output(temp_file.name)
        return temp_file.name
    except Exception as e:
        logger.error(f"PDF error: {str(e)}")
        return None

def analyze_wine(data, variety, countries):
    if data is None or data.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    filtered_data = data[data['–°–æ—Ä—Ç'].str.contains(variety, case=False, na=False)]
    filtered_data = filtered_data[filtered_data['–°—Ç—Ä–∞–Ω–∞'].isin(countries)]
    
    if len(filtered_data) == 0:
        st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    with st.spinner('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...'):
        tab1, tab2, tab3, tab4, tab5 = st.tabs(["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–ì—Ä–∞—Ñ–∏–∫–∏", "–¢–µ–∫—Å—Ç", "–ö–∞—Ä—Ç–∞", "–û—Ç—á–µ—Ç"])
        
        with tab1:
            st.pyplot(create_summary_plot(data, filtered_data, variety))
            col1, col2 = st.columns(2)
            with col1:
                st.dataframe(filtered_data.nlargest(5, '–¶–µ–Ω–∞'))
            with col2:
                st.dataframe(filtered_data.nlargest(5, '–†–µ–π—Ç–∏–Ω–≥'))
            
            stats = filtered_data.groupby('–°—Ç—Ä–∞–Ω–∞').agg({
                '–†–µ–π—Ç–∏–Ω–≥': ['mean', 'median', 'std'],
                '–¶–µ–Ω–∞': ['mean', 'median', 'std'],
                '–°–æ—Ä—Ç': 'count'
            })
            st.dataframe(translate_stats(stats))
        
        with tab2:
            fig = create_interactive_plot(filtered_data, variety)
            st.plotly_chart(fig, use_container_width=True)
        
        with tab3:
            if '–û–ø–∏—Å–∞–Ω–∏–µ' in filtered_data.columns:
                st.pyplot(create_wordcloud(filtered_data, variety))
                sentiment_fig, _ = analyze_sentiment(filtered_data)
                st.plotly_chart(sentiment_fig)
        
        with tab4:
            geo_result = create_geographical_analysis(filtered_data)
            if geo_result:
                st_folium(geo_result[0], width=800)
                st.dataframe(geo_result[1])
        
        with tab5:
            if st.button("–°–æ–∑–¥–∞—Ç—å PDF –æ—Ç—á–µ—Ç"):
                pdf_path = create_pdf_report(filtered_data, variety, stats)
                if pdf_path:
                    with open(pdf_path, "rb") as f:
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                            data=f,
                            file_name=f"wine_report_{datetime.now().strftime('%Y%m%d')}.pdf",
                            mime="application/pdf"
                        )
                    os.unlink(pdf_path)

def main():
    st.title("üç∑ –ê–Ω–∞–ª–∏–∑ –≤–∏–Ω")
    
    uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ", type=["csv", "xlsx"])
    if uploaded_file:
        data = load_data(uploaded_file)
        if data is not None:
            countries = st.sidebar.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã",
                options=data['–°—Ç—Ä–∞–Ω–∞'].unique(),
                default=data['–°—Ç—Ä–∞–Ω–∞'].unique()[:2]
            )
            variety = st.sidebar.selectbox(
                "–°–æ—Ä—Ç –≤–∏–Ω–∞",
                options=data['–°–æ—Ä—Ç'].unique()
            )
            if st.sidebar.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
                analyze_wine(data, variety, countries)

if __name__ == "__main__":
    main()
